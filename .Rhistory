LCI[1]
LCI[2]
LCI[0]
as.numeric(LCI
)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
xval <- 10
xlci <- 0
xuci <- 20
x <- ValueWithUncertainty(xlci, xval, xuci, model = rtnRandomSample)
calcMult <- function(v) {
return(2 * v)
}
calcMultArgs <- function() {
return(list(x))
}
calcMultiModel <- function(v) {
return(do.call(calcMult, calcMultArgs()))
}
set.seed(8121976) # just so tests wont fail for random number changes
value <- calcMult(x)
expect_equal(value, 2 * xval)
x <- ValueWithUncertaintySampled(x)
samples <- replicate(10000, calcMultiModel(x))
LCI <- quantile(samples, 0.05)
expect_equal(as.numeric(LCI), 2)
UCI <- quantile(samples, 0.95)
expect_equal(as.numeric(UCI), 38)
estA <- ValueWithUncertainty(as.numeric(LCI), value, as.numeric(UCI), model = calcMultiModel)
expect_equal(estA, 2 * xval)
estA
devtools::test()
devtools::test()
xval <- 10
xlci <- 0
xuci <- 20
x <- ValueWithUncertainty(xlci, xval, xuci, model = rtnRandomSample)
calcMult <- function(v) {
return(2 * v)
}
calcMultArgs <- function() {
return(list(x))
}
calcMultiModel <- function(v) {
return(do.call(calcMult, calcMultArgs()))
}
set.seed(8121976) # just so tests wont fail for random number changes
# Fixed calculation using x values without variation
value <- calcMult(x)
expect_equal(value, 2 * xval)
###
# sampled X values
x <- ValueWithUncertaintySampled(x)
samples <- replicate(10000, calcMultiModel(x))
LCI <- quantile(samples, 0.05)
expect_equal(as.numeric(LCI), 2)
UCI <- quantile(samples, 0.95)
expect_equal(as.numeric(UCI), 38)
# Chain to next est model
estA <- ValueWithUncertainty(as.numeric(LCI), value, as.numeric(UCI), model = calcMultiModel)
# Fixed calculation using estA values without variation
expect_equal(as.numeric(estA), 2 * xval)
expect_equal(as.numeric(estA), 2 * xval)
expect_equal(as.numeric(estA), 2 * xval)
expect_equal(as.numeric(estA), 2 * xval)
###
# sampled estA values
estA <- ValueWithUncertaintySampled(estA)
# very simple repeat to simulate value and variation
samples <- replicate(10000, estA) # estA is a model of value with variation
expect_equal(round(mean(samples)), (2 * xval))
compare_summary_equal(samples, 0, 10, 20, 19.9, 30, 40)
estA
estA
estA
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
calc_A <- function(v) {
return(2 * v)
}
calc_A_Args <- function() {
return(list(x))
}
calc_B <- function(v) {
return(v + 10)
}
calc_B_Args <- function() {
return(list(y))
}
calc_C <- function(a, b, c) {
return((a + b) / c)
}
calc_C_Args <- function() {
return(list(estA, estB, z))
}
# Medium variance used in multiplication  and numerators
xval <- 10
xlci <- 0
xuci <- 20
x <- ValueWithUncertainty(xlci, xval, xuci, model = rtnRandomSample)
# Low variance with limited impact to calculations (small value used in
# addition in numerators)
yval <- 2
ylci <- 0
yuci <- 4
y <- ValueWithUncertainty(ylci, yval, yuci, model = rtnRandomSample)
# Larger variance used in denominator, no multiplication
zval <- 100
zlci <- 70
zuci <- 130
z <- ValueWithUncertainty(zlci, zval, zuci, model = rtnRandomSample)
# Chain to next est model
estA <- createEstValueModel(calc_A(x), calc_A, calc_A_Args)
estB <- createEstValueModel(calc_B(y), calc_B, calc_B_Args)
estC <- createEstValueModel(calc_C(x, y, z), calc_C, calc_C_Args)
x <- ValueWithUncertaintySampled(x)
y <- ValueWithUncertaintySampled(y)
z <- ValueWithUncertaintySampled(z)
samples <- replicate(10000, do.call(calc_C, calc_C_Args()))
V_all <- var(samples)
expect_equal(mean(estA), 2.0 * mean(x))
expect_equal(mean(estB), mean(y) + 10.0)
expect_equal(mean(estC), ((2.0 * mean(x)) + (mean(y) + 10.0) / mean(z)))
expect_equal(mean(estC), mean(samples))
x
y
z
estC
calc_C(x,y,z)
calc_C(x,y,z)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::document()
quit9)
quit()
devtools::document()
devtools::build()
devtools::test()
quit()
devtools::document()
quit()
devtools::test()
devtools::test()
quit()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::document()
devtools::build()
quit()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
quit9)
quit()
devtools::test()
quit()
devtools::test()
devtools::test()
devtools::test()
devtools::build()
devtools::document()
quit()
devtools::build()
quit()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
quit()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
0.01 / 1e+04
0.0001 + (0.00009 / 1e+04)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
tt <- c(0.47 - (0.47 * 0.5), 0.47, 0.47 + (0.47 * 0.5))
tt
devtools::test()
devtools::test()
devtools::test()
quit()
devtools::test()
rm(list=ls())
devtools::test()
 equalFunc <- createFunc_equalWithTol(tol_value = 1e-8, margin = 9e-9)
createFunc_equalWithTol <- function(tol_value = 1e-07, margin = 9e-08) {
  return(function(l, e, u) {
    nl <- l
    nu <- u
    if (abs(e) < 1e+04) {
      scale <- 1.0e+04
    } else {
      scale <- 1.0
    }
    if (isTRUE(all.equal(l * scale, e * scale, tolerance = tol_value))) {
      nl <- e - (margin / scale)
    }
    if (isTRUE(all.equal(e * scale, u * scale, tolerance = tol_value))) {
      nu <- e + (margin / scale)
    }
    if (isTRUE(all.equal(l * scale, e * scale, tolerance = tol_value)) &&
      isTRUE(all.equal(e * scale, u * scale, tolerance = tol_value))) {
      return(c(e, e, e))
    } else {
      return(c(nl, e, nu))
    }
  })
}
 equalFunc <- createFunc_equalWithTol(tol_value = 1e-8, margin = 9e-9)
equalFunc(10, 10, 10)
equalFunc(10, 10, 20)
createFunc_equalWithTol <- function(tol_value = 1e-07, margin = 9e-08) {
  return(function(l, e, u) {
    nl <- l
    nu <- u
    if (abs(e) < 1e+04) {
      scale <- 1.0e+04
    } else {
      scale <- 1.0
    }
    if (isTRUE(all.equal(l * scale, e * scale, tolerance = tol_value))) {
      nl <- e - (margin / scale)
    }
    if (isTRUE(all.equal(e * scale, u * scale, tolerance = tol_value))) {
      nu <- e + (margin / scale)
    }
    if (isTRUE(all.equal(l * scale, e * scale, tolerance = tol_value)) &&
      isTRUE(all.equal(e * scale, u * scale, tolerance = tol_value))) {
      return(c(e, e, e))
    } else {
  print("output:")
  print(c(nl,e,nu))
      return(c(nl, e, nu))
    }
  })
}
 equalFunc <- createFunc_equalWithTol(tol_value = 1e-8, margin = 9e-9)
equalFunc(10, 10, 10)
equalFunc(10, 10, 20)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
log(10)
log10(10)
log10(1000)
log10(10000)
log10(10000)-1
log10(0.1)-1
log10(10000)-4
log10(1000)-4
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
quit()
