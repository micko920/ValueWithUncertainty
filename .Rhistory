tri <- replicate(n=100000, rtriangle(1, lower=1, theta=5, upper=10), simplify = TRUE)
hist(tri, breaks=100, main="Triangle Distribution", xlab="x")
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
require(stats)
set.seed(14)
x <- rtriangle(1, lower=1, theta=5, upper=10)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
require(stats)
set.seed(14)
x <- rtriangle(10000, lower=1, theta=5, upper=10)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
library(VGAM)
## view the distribution
tri <- replicate(n=100000, rtriangle(1, lower=1, theta=5, upper=10), simplify = TRUE)
hist(tri, breaks=100, main="Triangle Distribution", xlab="x")
tri <- replicate(n=1, rtriangle(100000, lower=1, theta=5, upper=10), simplify = TRUE)
hist(tri, breaks=100, main="Triangle Distribution", xlab="x")
x <- value(1:10)
class(x)
x
x <- value(1:10)
class(x)
x[1]
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(list(x), class = "value")
}
x <- value(1:10)
class(x)
x[1]
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(list(x), class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
if (x == y) {
print("equal")
}
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
if (!isTRUE(all(x == y))) {
print("equal")
}
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
if (isTRUE(all(x == y))) {
print("equal")
}
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(1:11)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
if (isTRUE(all(x == y))) {
print("equal")
}
value <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(x, uci=0, lci=10, class = "value")
}
x <- value(2:11)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
if (isTRUE(all(x == y))) {
print("equal")
}
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(2:11)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
x <- ValueWithUncertainty(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(1:10)
y <- 1:10
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
x <- 1
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
x <- 1
x
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- x + 1
a
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- 1+ x
a
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- 1+ 1
a
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- 1+ x
a
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
Ops.ValueWithUncertainty <- function(e1, e2) {
if (.Generic %in% c("&", "|", "!", "==", "!=", "<", ">", "<=", ">=")) {
warn_once_bool(.Generic)
return(NextMethod())
}
if (!missing(e2)) {
if (inherits(e1, "ValueWithUncertainty")) {
e1 <- unclass(e1)
}
if (inherits(e2, "ValueWithUncertainty")) {
# warn_once_coercion("Ops")
e2 <- unclass(e2)
}
}
return(NextMethod())
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- 1+ x
a
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
Ops.ValueWithUncertainty <- function(e1, e2) {
if (.Generic %in% c("&", "|", "!", "==", "!=", "<", ">", "<=", ">=")) {
return(NextMethod())
}
if (!missing(e2)) {
if (inherits(e1, "ValueWithUncertainty")) {
e1 <- unclass(e1)
}
if (inherits(e2, "ValueWithUncertainty")) {
# warn_once_coercion("Ops")
e2 <- unclass(e2)
}
}
return(NextMethod())
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
z<- x * y
z
if (isTRUE(all(x == y))) {
print("equal")
}
a <- 1+ x
a
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
class(+x)
Ops.ValueWithUncertainty <- function(e1, e2) {
if (.Generic %in% c("&", "|", "!", "==", "!=", "<", ">", "<=", ">=")) {
return(NextMethod())
}
if (!missing(e1)) {
if (inherits(e1, "ValueWithUncertainty")) {
e1 <- unclass(e1)
}
}
if (!missing(e2)) {
if (inherits(e2, "ValueWithUncertainty")) {
# warn_once_coercion("Ops")
e2 <- unclass(e2)
}
}
return(NextMethod())
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
class(+x)
ValueWithUncertainty <- function(LowerCI, Value, UpperCI) {
if (!is.numeric(Value)) stop("Value must be numeric", call. = FALSE)
this <- structure(Value, lci = LowerCI, uci = UpperCI, class = "ValueWithUncertainty")
return(this)
}
Ops.ValueWithUncertainty <- function(e1, e2) {
if (.Generic %in% c("&", "|", "!", "==", "!=", "<", ">", "<=", ">=")) {
return(NextMethod())
}
if (!missing(e1)) {
if (inherits(e1, "ValueWithUncertainty")) {
e1 <- unclass(e1)
}
}
if (!missing(e2)) {
if (inherits(e2, "ValueWithUncertainty")) {
# warn_once_coercion("Ops")
e2 <- unclass(e2)
}
}
return(NextMethod())
}
x <- ValueWithUncertainty(0,1,10)
y <- 1
class(x)
x[1]
y[1]
x
y
az <- +x
class(az)
az
az.lci
az["lci"]
az$lci
az.lci()
attr(az,"lci")
attr(az,"uci")
xval <- 1.1:10.1
xerr <- rep(0.05, 10)
xval[c(2, 9)] <- c(1.102, 10.098)
xerr[c(2, 9)] <- 0.1
xval <- 1.1:10.1
xval[c(2, 9)] <- c(1.102, 10.098)
xval
xval <- 1.1:10.1
xval
xval[c(2, 9)] <- c(1.102, 10.098)
xval
xval <- 1.1:10.1
xval[c(2, 9)] <- c(1.12, 9.98)
xval
xval <- 1:10
xlci <- rep(1, 10)
xuci <- rep(100, 10)
x <- ValueWithUncertainty(xlci, xval, xuci)
xval <- 1:10
xlci <- rep(1, 10)
xuci <- rep(100, 10)
x <- ValueWithUncertainty(xlci, xval, xuci)
x
require(stats); require(graphics)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# compute the list mean for each list element
lapply(x, mean)
# median and quartiles for each list element
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
x
lapply(x, mean)
lapply(x$a, mean)
lapply(x$a, print)
apply(x$a, print)
install.packages("shiny")
install.packages("shinyjs")
shiny::runApp('ext/eas-prj/FijiGov/NFMSIntegrationFramework/code/shiny/ShinyPrototypes')
sessionInfo()
setwd("~/ext/eas-prj/FijiGov/NFMSIntegrationFramework/code/calcs/ValueWithUncertainty")
devtools::build()
devtools::test()
devtools::test_coverage()
sessionInfo()
library(covr)
package_coverage()
report()
